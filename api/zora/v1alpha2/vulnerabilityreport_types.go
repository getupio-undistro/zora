// Copyright 2024 Undistro Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha2

import (
	"github.com/undistro/zora/api/zora/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VulnerabilityReportSpec defines the desired state of VulnerabilityReport
type VulnerabilityReportSpec struct {
	v1alpha1.VulnerabilityReportCommon `json:",inline"`
	Vulnerabilities                    []Vulnerability `json:"vulnerabilities"`
}

func (in *VulnerabilityReportSpec) Summarize() {
	s := &v1alpha1.VulnerabilitySummary{}
	for _, v := range in.Vulnerabilities {
		s.Total++
		switch v.Severity {
		case "CRITICAL":
			s.Critical++
		case "HIGH":
			s.High++
		case "MEDIUM":
			s.Medium++
		case "LOW":
			s.Low++
		default:
			s.Unknown++
		}
	}
	in.Summary = *s
}

type Vulnerability struct {
	v1alpha1.VulnerabilityCommon `json:",inline"`
	Packages                     []v1alpha1.Package `json:"packages"`
}

// VulnerabilityReportStatus defines the observed state of VulnerabilityReport
type VulnerabilityReportStatus struct {
	v1alpha1.Status `json:",inline"`
}

func (in *VulnerabilityReport) SetSaaSStatus(status metav1.ConditionStatus, reason, msg string) {
	in.Status.SetCondition(metav1.Condition{
		Type:               "SaaS",
		Status:             status,
		ObservedGeneration: in.Generation,
		Reason:             reason,
		Message:            msg,
	})
}

func (in *VulnerabilityReport) SaaSStatusIsTrue() bool {
	return in.Status.ConditionIsTrue("SaaS")
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:storageversion
//+kubebuilder:resource:shortName={vuln,vulns,vulnerabilities}
//+kubebuilder:printcolumn:name="Cluster",type="string",JSONPath=".spec.cluster",priority=0
//+kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image",priority=0
//+kubebuilder:printcolumn:name="Total",type="string",JSONPath=".spec.summary.total",priority=0
//+kubebuilder:printcolumn:name="Critical",type="string",JSONPath=".spec.summary.critical",priority=0
//+kubebuilder:printcolumn:name="High",type="string",JSONPath=".spec.summary.high",priority=0
//+kubebuilder:printcolumn:name="Medium",type="string",JSONPath=".spec.summary.medium",priority=1
//+kubebuilder:printcolumn:name="Low",type="string",JSONPath=".spec.summary.low",priority=1
//+kubebuilder:printcolumn:name="Unknown",type="string",JSONPath=".spec.summary.unknown",priority=1
//+kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",priority=0

// VulnerabilityReport is the Schema for the vulnerabilityreports API
// +genclient
type VulnerabilityReport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   VulnerabilityReportSpec   `json:"spec,omitempty"`
	Status VulnerabilityReportStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// VulnerabilityReportList contains a list of VulnerabilityReport
type VulnerabilityReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VulnerabilityReport `json:"items"`
}

func init() {
	SchemeBuilder.Register(&VulnerabilityReport{}, &VulnerabilityReportList{})
}
