// Copyright 2024 Undistro Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha2

import (
	"fmt"

	"github.com/undistro/zora/api/zora/v1alpha1"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// ConvertTo converts this VulnerabilityReport (v1alpha2) to the Hub version (v1alpha1)
func (src *VulnerabilityReport) ConvertTo(dstRaw conversion.Hub) error {
	dst, ok := dstRaw.(*v1alpha1.VulnerabilityReport)
	if !ok {
		return fmt.Errorf("unsupported type")
	}
	dst.ObjectMeta = src.ObjectMeta
	dst.Status.Status = src.Status.Status
	dst.Spec.VulnerabilityReportCommon = src.Spec.VulnerabilityReportCommon

	for _, vuln := range src.Spec.Vulnerabilities {
		for _, pkg := range vuln.Packages {
			dst.Spec.Vulnerabilities = append(dst.Spec.Vulnerabilities, v1alpha1.Vulnerability{
				VulnerabilityCommon: vuln.VulnerabilityCommon,
				Package:             pkg,
			})
		}
	}
	dst.Spec.Summarize()
	return nil
}

// ConvertFrom converts from the Hub version (v1alpha1) to this VulnerabilityReport (v1alpha2)
func (dst *VulnerabilityReport) ConvertFrom(srcRaw conversion.Hub) error {
	src, ok := srcRaw.(*v1alpha1.VulnerabilityReport)
	if !ok {
		return fmt.Errorf("unsupported type")
	}
	dst.ObjectMeta = src.ObjectMeta
	dst.Status.Status = src.Status.Status
	dst.Spec.VulnerabilityReportCommon = src.Spec.VulnerabilityReportCommon

	vulnsByID := make(map[string]*Vulnerability)
	for _, vuln := range src.Spec.Vulnerabilities {
		if _, ok := vulnsByID[vuln.ID]; !ok {
			vulnsByID[vuln.ID] = &Vulnerability{VulnerabilityCommon: vuln.VulnerabilityCommon}
		}
		vulnsByID[vuln.ID].Packages = append(vulnsByID[vuln.ID].Packages, vuln.Package)
	}
	for _, vuln := range vulnsByID {
		dst.Spec.Vulnerabilities = append(dst.Spec.Vulnerabilities, *vuln)
	}
	dst.Spec.Summarize()
	return nil
}
