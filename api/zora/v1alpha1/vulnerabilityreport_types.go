// Copyright 2023 Undistro Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha1

import (
	"fmt"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VulnerabilityReportSpec defines the desired state of VulnerabilityReport
type VulnerabilityReportSpec struct {
	VulnerabilityReportCommon `json:",inline"`
	Vulnerabilities           []Vulnerability `json:"vulnerabilities"`
}

type VulnerabilityReportCommon struct {
	Cluster        string               `json:"cluster"`
	Image          string               `json:"image"`
	Digest         string               `json:"digest"`
	Tags           []string             `json:"tags,omitempty"`
	Architecture   string               `json:"architecture,omitempty"`
	OS             string               `json:"os,omitempty"`
	Distro         *Distro              `json:"distro,omitempty"`
	TotalResources int                  `json:"totalResources"`
	Resources      map[string][]string  `json:"resources"`
	Summary        VulnerabilitySummary `json:"summary"`
}

type Vulnerability struct {
	VulnerabilityCommon `json:",inline"`
	Package             `json:",inline"`
}

type Package struct {
	Package    string `json:"package"`
	Version    string `json:"version"`
	FixVersion string `json:"fixVersion,omitempty"`
	Status     string `json:"status,omitempty"`
	Type       string `json:"type,omitempty"`
}

func (r *Package) String() string {
	return fmt.Sprintf("Package=%s, Version=%s, FixVersion=%s, Status=%s, Type=%s", r.Package, r.Version, r.FixVersion, r.Status, r.Type)
}

type VulnerabilityCommon struct {
	ID               string       `json:"id"`
	Severity         string       `json:"severity"`
	Title            string       `json:"title"`
	Description      string       `json:"description,omitempty"`
	URL              string       `json:"url,omitempty"`
	Score            string       `json:"score,omitempty"`
	PublishedDate    *metav1.Time `json:"publishedDate,omitempty"`
	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
}

type Distro struct {
	Name    string `json:"name,omitempty"`
	Version string `json:"version,omitempty"`
}

type VulnerabilitySummary struct {
	Total int `json:"total"`

	Critical int `json:"critical"`
	High     int `json:"high"`
	Medium   int `json:"medium"`
	Low      int `json:"low"`
	Unknown  int `json:"unknown"`
}

// VulnerabilityReportStatus defines the observed state of VulnerabilityReport
type VulnerabilityReportStatus struct {
	Status `json:",inline"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:resource:shortName={vuln,vulns,vulnerabilities}
//+kubebuilder:printcolumn:name="Cluster",type="string",JSONPath=".spec.cluster",priority=0
//+kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image",priority=0
//+kubebuilder:printcolumn:name="Total",type="string",JSONPath=".spec.summary.total",priority=0
//+kubebuilder:printcolumn:name="Critical",type="string",JSONPath=".spec.summary.critical",priority=0
//+kubebuilder:printcolumn:name="High",type="string",JSONPath=".spec.summary.high",priority=0
//+kubebuilder:printcolumn:name="Medium",type="string",JSONPath=".spec.summary.medium",priority=1
//+kubebuilder:printcolumn:name="Low",type="string",JSONPath=".spec.summary.low",priority=1
//+kubebuilder:printcolumn:name="Unknown",type="string",JSONPath=".spec.summary.unknown",priority=1
//+kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",priority=0
//+kubebuilder:deprecatedversion:warning="The v1alpha1 version of VulnerabilityReport has been deprecated. Please use v1alpha2 instead."

// VulnerabilityReport is the Schema for the vulnerabilityreports API
// +genclient
type VulnerabilityReport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   VulnerabilityReportSpec   `json:"spec,omitempty"`
	Status VulnerabilityReportStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// VulnerabilityReportList contains a list of VulnerabilityReport
type VulnerabilityReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VulnerabilityReport `json:"items"`
}

func init() {
	SchemeBuilder.Register(&VulnerabilityReport{}, &VulnerabilityReportList{})
}
