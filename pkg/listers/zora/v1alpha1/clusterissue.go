// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/undistro/zora/api/zora/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterIssueLister helps list ClusterIssues.
// All objects returned here must be treated as read-only.
type ClusterIssueLister interface {
	// List lists all ClusterIssues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterIssue, err error)
	// ClusterIssues returns an object that can list and get ClusterIssues.
	ClusterIssues(namespace string) ClusterIssueNamespaceLister
	ClusterIssueListerExpansion
}

// clusterIssueLister implements the ClusterIssueLister interface.
type clusterIssueLister struct {
	indexer cache.Indexer
}

// NewClusterIssueLister returns a new ClusterIssueLister.
func NewClusterIssueLister(indexer cache.Indexer) ClusterIssueLister {
	return &clusterIssueLister{indexer: indexer}
}

// List lists all ClusterIssues in the indexer.
func (s *clusterIssueLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterIssue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterIssue))
	})
	return ret, err
}

// ClusterIssues returns an object that can list and get ClusterIssues.
func (s *clusterIssueLister) ClusterIssues(namespace string) ClusterIssueNamespaceLister {
	return clusterIssueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterIssueNamespaceLister helps list and get ClusterIssues.
// All objects returned here must be treated as read-only.
type ClusterIssueNamespaceLister interface {
	// List lists all ClusterIssues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterIssue, err error)
	// Get retrieves the ClusterIssue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterIssue, error)
	ClusterIssueNamespaceListerExpansion
}

// clusterIssueNamespaceLister implements the ClusterIssueNamespaceLister
// interface.
type clusterIssueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterIssues in the indexer for a given namespace.
func (s clusterIssueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterIssue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterIssue))
	})
	return ret, err
}

// Get retrieves the ClusterIssue from the indexer for a given namespace and name.
func (s clusterIssueNamespaceLister) Get(name string) (*v1alpha1.ClusterIssue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterissue"), name)
	}
	return obj.(*v1alpha1.ClusterIssue), nil
}
