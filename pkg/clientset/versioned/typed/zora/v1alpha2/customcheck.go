// Code generated by client-gen. DO NOT EDIT.

package v1alpha2

import (
	"context"
	"time"

	v1alpha2 "github.com/undistro/zora/api/zora/v1alpha2"
	scheme "github.com/undistro/zora/pkg/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CustomChecksGetter has a method to return a CustomCheckInterface.
// A group's client should implement this interface.
type CustomChecksGetter interface {
	CustomChecks(namespace string) CustomCheckInterface
}

// CustomCheckInterface has methods to work with CustomCheck resources.
type CustomCheckInterface interface {
	Create(ctx context.Context, customCheck *v1alpha2.CustomCheck, opts v1.CreateOptions) (*v1alpha2.CustomCheck, error)
	Update(ctx context.Context, customCheck *v1alpha2.CustomCheck, opts v1.UpdateOptions) (*v1alpha2.CustomCheck, error)
	UpdateStatus(ctx context.Context, customCheck *v1alpha2.CustomCheck, opts v1.UpdateOptions) (*v1alpha2.CustomCheck, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha2.CustomCheck, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha2.CustomCheckList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha2.CustomCheck, err error)
	CustomCheckExpansion
}

// customChecks implements CustomCheckInterface
type customChecks struct {
	client rest.Interface
	ns     string
}

// newCustomChecks returns a CustomChecks
func newCustomChecks(c *ZoraV1alpha2Client, namespace string) *customChecks {
	return &customChecks{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the customCheck, and returns the corresponding customCheck object, and an error if there is any.
func (c *customChecks) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha2.CustomCheck, err error) {
	result = &v1alpha2.CustomCheck{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("customchecks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of CustomChecks that match those selectors.
func (c *customChecks) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha2.CustomCheckList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha2.CustomCheckList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("customchecks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested customChecks.
func (c *customChecks) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("customchecks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a customCheck and creates it.  Returns the server's representation of the customCheck, and an error, if there is any.
func (c *customChecks) Create(ctx context.Context, customCheck *v1alpha2.CustomCheck, opts v1.CreateOptions) (result *v1alpha2.CustomCheck, err error) {
	result = &v1alpha2.CustomCheck{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("customchecks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(customCheck).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a customCheck and updates it. Returns the server's representation of the customCheck, and an error, if there is any.
func (c *customChecks) Update(ctx context.Context, customCheck *v1alpha2.CustomCheck, opts v1.UpdateOptions) (result *v1alpha2.CustomCheck, err error) {
	result = &v1alpha2.CustomCheck{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("customchecks").
		Name(customCheck.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(customCheck).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *customChecks) UpdateStatus(ctx context.Context, customCheck *v1alpha2.CustomCheck, opts v1.UpdateOptions) (result *v1alpha2.CustomCheck, err error) {
	result = &v1alpha2.CustomCheck{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("customchecks").
		Name(customCheck.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(customCheck).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the customCheck and deletes it. Returns an error if one occurs.
func (c *customChecks) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("customchecks").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *customChecks) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("customchecks").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched customCheck.
func (c *customChecks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha2.CustomCheck, err error) {
	result = &v1alpha2.CustomCheck{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("customchecks").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
